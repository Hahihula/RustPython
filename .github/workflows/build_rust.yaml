name: Rust

on:
  push:
    branches:
      - test-rust-build
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build for multiple platforms
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry
          restore-keys: |
            ${{ runner.os }}-cargo-registry

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index
          restore-keys: |
            ${{ runner.os }}-cargo-index

      - name: Build
        run: cargo build --release

      - name: Run tests
        run: cargo test --release

      - name: Create release directory
        run: mkdir -p release

      - name: Copy binary to release directory
        run: |
          if [ "${{ matrix.os }}" == 'windows-latest' ]; then
            cp target/release/rustpython.exe release/rustpython-${{ matrix.os }}.exe
          else
              cp target/release/rustpython release/rustpython-${{ matrix.os }}
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rustpython-${{ matrix.os }}
          path: release/rustpython-${{ matrix.os }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: rustpython-ubuntu-latest
          path: ./release

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: rustpython-windows-latest
          path: ./release

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: rustpython-macos-latest
          path: ./release

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (Ubuntu)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/rustpython-ubuntu-latest
          asset_name: rustpython-ubuntu-latest
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/rustpython-windows-latest
          asset_name: rustpython-windows-latest.exe
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (macOS)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/rustpython-macos-latest
          asset_name: rustpython-macos-latest
          asset_content_type: application/octet-stream
